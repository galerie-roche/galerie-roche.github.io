{"version":3,"sources":["webpack:///./src/i18n/Redirect.js","webpack:///./node_modules/lodash/_Symbol.js","webpack:///./node_modules/lodash/_baseToString.js","webpack:///./node_modules/lodash/isSymbol.js","webpack:///./node_modules/core-js/modules/es6.object.keys.js","webpack:///./node_modules/core-js/modules/_object-sap.js","webpack:///./node_modules/browser-lang/dist/index.js","webpack:///./node_modules/lodash/startsWith.js","webpack:///./node_modules/lodash/_baseClamp.js","webpack:///./node_modules/lodash/_root.js","webpack:///./node_modules/lodash/_freeGlobal.js","webpack:///./node_modules/lodash/_arrayMap.js","webpack:///./node_modules/lodash/isArray.js","webpack:///./node_modules/lodash/_baseGetTag.js","webpack:///./node_modules/lodash/_getRawTag.js","webpack:///./node_modules/lodash/_objectToString.js","webpack:///./node_modules/lodash/isObjectLike.js","webpack:///./node_modules/lodash/toInteger.js","webpack:///./node_modules/lodash/toFinite.js","webpack:///./node_modules/lodash/toNumber.js","webpack:///./node_modules/lodash/isObject.js","webpack:///./node_modules/lodash/toString.js"],"names":["Redirect","_ref","location","langKeys","Object","keys","languages","pathname","window","detected","localStorage","getItem","browserLang","fallback","newPath","withPrefix","setItem","replace","react__WEBPACK_IMPORTED_MODULE_4___default","a","createElement","Symbol","__webpack_require__","module","exports","arrayMap","isArray","isSymbol","INFINITY","symbolProto","prototype","undefined","symbolToString","toString","baseToString","value","call","result","baseGetTag","isObjectLike","symbolTag","toObject","$keys","it","$export","core","fails","KEY","exec","fn","exp","S","F","defineProperty","obj","_startsWith","_startsWith2","__esModule","default","getBrowserLang","navigator","language","browserLanguage","userLanguage","systemLanguage","normalizeCode","code","toLowerCase","options","match","filter","lang","length","baseClamp","toInteger","string","target","position","slice","number","lower","upper","freeGlobal","freeSelf","self","root","Function","global","array","iteratee","index","Array","getRawTag","objectToString","nullTag","undefinedTag","symToStringTag","toStringTag","objectProto","hasOwnProperty","nativeObjectToString","isOwn","tag","unmasked","e","toFinite","remainder","toNumber","MAX_INTEGER","isObject","NAN","reTrim","reIsBadHex","reIsBinary","reIsOctal","freeParseInt","parseInt","other","valueOf","isBinary","test","type"],"mappings":"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","file":"component---src-i-18-n-redirect-js-bd8284cadb8354432614.js","sourcesContent":["// @flow\nimport React from 'react';\n// import React, { PureComponent } from 'react';\nimport { withPrefix } from 'gatsby-link';\nimport browserLang from 'browser-lang';\nimport { languages } from './index';\n\ntype PropsT = {\n    location: string,\n};\n\nconst Redirect = ({ location }: PropsT) => {\n    const langKeys = Object.keys(languages);\n    const { pathname } = location;\n\n    // Skip build, Browsers only\n    if (typeof window !== 'undefined') {\n        const detected =\n            window.localStorage.getItem('language') ||\n            browserLang({\n                languages: langKeys,\n                fallback: 'en',\n            });\n\n        const newPath = withPrefix(`/${detected}${pathname}`);\n        window.localStorage.setItem('language', detected);\n\n        if (newPath !== location.pathname) {\n            window.location.replace(newPath);\n        }\n    }\n\n    return <div />;\n};\n\nexport default Redirect;\n","var root = require('./_root');\n\n/** Built-in value references. */\nvar Symbol = root.Symbol;\n\nmodule.exports = Symbol;\n","var Symbol = require('./_Symbol'),\n    arrayMap = require('./_arrayMap'),\n    isArray = require('./isArray'),\n    isSymbol = require('./isSymbol');\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isArray(value)) {\n    // Recursively convert values (susceptible to call stack limits).\n    return arrayMap(value, baseToString) + '';\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\nmodule.exports = baseToString;\n","var baseGetTag = require('./_baseGetTag'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && baseGetTag(value) == symbolTag);\n}\n\nmodule.exports = isSymbol;\n","// 19.1.2.14 Object.keys(O)\nvar toObject = require('./_to-object');\nvar $keys = require('./_object-keys');\n\nrequire('./_object-sap')('keys', function () {\n  return function keys(it) {\n    return $keys(toObject(it));\n  };\n});\n","// most Object methods by ES6 should accept primitives\nvar $export = require('./_export');\nvar core = require('./_core');\nvar fails = require('./_fails');\nmodule.exports = function (KEY, exec) {\n  var fn = (core.Object || {})[KEY] || Object[KEY];\n  var exp = {};\n  exp[KEY] = exec(fn);\n  $export($export.S + $export.F * fails(function () { fn(1); }), 'Object', exp);\n};\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _startsWith = require('lodash/startsWith');\n\nvar _startsWith2 = _interopRequireDefault(_startsWith);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction getBrowserLang() {\n  if (typeof window === 'undefined') {\n    return null;\n  }\n\n  var lang = window.navigator.languages && window.navigator.languages[0] || window.navigator.language || window.navigator.browserLanguage || window.navigator.userLanguage || window.navigator.systemLanguage || null;\n\n  return lang;\n}\n\nfunction normalizeCode(code) {\n  return code.toLowerCase().replace(/-/, '_');\n}\n\nfunction getPreferredLanguage(options) {\n  if (!options) {\n    return getBrowserLang();\n  }\n\n  var languages = options.languages,\n      fallback = options.fallback;\n\n  if (!options.languages) {\n    return fallback;\n  }\n\n  // some browsers report language as en-US instead of en_US\n  var browserLanguage = normalizeCode(getBrowserLang());\n\n  if (!browserLanguage) {\n    return fallback;\n  }\n\n  var match = languages.filter(function (lang) {\n    return normalizeCode(lang) === browserLanguage;\n  });\n\n  if (match.length > 0) {\n    return match[0] || fallback;\n  }\n\n  // en == en_US\n  var matchCodeOnly = languages.filter(function (lang) {\n    return (0, _startsWith2.default)(browserLanguage, lang);\n  });\n  return matchCodeOnly[0] || fallback;\n}\n\nexports.default = getPreferredLanguage;","var baseClamp = require('./_baseClamp'),\n    baseToString = require('./_baseToString'),\n    toInteger = require('./toInteger'),\n    toString = require('./toString');\n\n/**\n * Checks if `string` starts with the given target string.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to inspect.\n * @param {string} [target] The string to search for.\n * @param {number} [position=0] The position to search from.\n * @returns {boolean} Returns `true` if `string` starts with `target`,\n *  else `false`.\n * @example\n *\n * _.startsWith('abc', 'a');\n * // => true\n *\n * _.startsWith('abc', 'b');\n * // => false\n *\n * _.startsWith('abc', 'b', 1);\n * // => true\n */\nfunction startsWith(string, target, position) {\n  string = toString(string);\n  position = position == null\n    ? 0\n    : baseClamp(toInteger(position), 0, string.length);\n\n  target = baseToString(target);\n  return string.slice(position, position + target.length) == target;\n}\n\nmodule.exports = startsWith;\n","/**\n * The base implementation of `_.clamp` which doesn't coerce arguments.\n *\n * @private\n * @param {number} number The number to clamp.\n * @param {number} [lower] The lower bound.\n * @param {number} upper The upper bound.\n * @returns {number} Returns the clamped number.\n */\nfunction baseClamp(number, lower, upper) {\n  if (number === number) {\n    if (upper !== undefined) {\n      number = number <= upper ? number : upper;\n    }\n    if (lower !== undefined) {\n      number = number >= lower ? number : lower;\n    }\n  }\n  return number;\n}\n\nmodule.exports = baseClamp;\n","var freeGlobal = require('./_freeGlobal');\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\nmodule.exports = root;\n","/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\nmodule.exports = freeGlobal;\n","/**\n * A specialized version of `_.map` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction arrayMap(array, iteratee) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      result = Array(length);\n\n  while (++index < length) {\n    result[index] = iteratee(array[index], index, array);\n  }\n  return result;\n}\n\nmodule.exports = arrayMap;\n","/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\nmodule.exports = isArray;\n","var Symbol = require('./_Symbol'),\n    getRawTag = require('./_getRawTag'),\n    objectToString = require('./_objectToString');\n\n/** `Object#toString` result references. */\nvar nullTag = '[object Null]',\n    undefinedTag = '[object Undefined]';\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\nmodule.exports = baseGetTag;\n","var Symbol = require('./_Symbol');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\nmodule.exports = getRawTag;\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\nmodule.exports = objectToString;\n","/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\nmodule.exports = isObjectLike;\n","var toFinite = require('./toFinite');\n\n/**\n * Converts `value` to an integer.\n *\n * **Note:** This method is loosely based on\n * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted integer.\n * @example\n *\n * _.toInteger(3.2);\n * // => 3\n *\n * _.toInteger(Number.MIN_VALUE);\n * // => 0\n *\n * _.toInteger(Infinity);\n * // => 1.7976931348623157e+308\n *\n * _.toInteger('3.2');\n * // => 3\n */\nfunction toInteger(value) {\n  var result = toFinite(value),\n      remainder = result % 1;\n\n  return result === result ? (remainder ? result - remainder : result) : 0;\n}\n\nmodule.exports = toInteger;\n","var toNumber = require('./toNumber');\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0,\n    MAX_INTEGER = 1.7976931348623157e+308;\n\n/**\n * Converts `value` to a finite number.\n *\n * @static\n * @memberOf _\n * @since 4.12.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted number.\n * @example\n *\n * _.toFinite(3.2);\n * // => 3.2\n *\n * _.toFinite(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toFinite(Infinity);\n * // => 1.7976931348623157e+308\n *\n * _.toFinite('3.2');\n * // => 3.2\n */\nfunction toFinite(value) {\n  if (!value) {\n    return value === 0 ? value : 0;\n  }\n  value = toNumber(value);\n  if (value === INFINITY || value === -INFINITY) {\n    var sign = (value < 0 ? -1 : 1);\n    return sign * MAX_INTEGER;\n  }\n  return value === value ? value : 0;\n}\n\nmodule.exports = toFinite;\n","var isObject = require('./isObject'),\n    isSymbol = require('./isSymbol');\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** Used to match leading and trailing whitespace. */\nvar reTrim = /^\\s+|\\s+$/g;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = value.replace(reTrim, '');\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nmodule.exports = toNumber;\n","/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\nmodule.exports = isObject;\n","var baseToString = require('./_baseToString');\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\n\nmodule.exports = toString;\n"],"sourceRoot":""}